// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package inventory

import (
	"context"
	"errors"

	"github.com/99designs/gqlgen/plugin/federation"
)

func (ec *executionContext) __resolve__service(ctx context.Context) (federation.Service, error) {
	if ec.DisableIntrospection {
		return federation.Service{}, errors.New("federated introspection disabled")
	}
	return federation.Service{
		SDL: `type Product @extends @key(fields: "upc") {
	upc: String! @external
	weight: Int @external
	price: Int @external
	inStock: Boolean
	shippingEstimate: Int @requires(fields: "price weight")
}
`,
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]interface{}) ([]_Entity, error) {
	list := []_Entity{}
	for _, rep := range representations {
		typeName, ok := rep["__typename"].(string)
		if !ok {
			return nil, errors.New("__typename must be an existing string")
		}
		switch typeName {

		case "Product":
			id, ok := rep["upc"].(string)
			if !ok {
				return nil, errors.New("opsies")
			}
			resp, err := ec.resolvers.Entity().FindProductByUpc(ctx, id)
			if err != nil {
				return nil, err
			}

			resp.Price, err = ec.unmarshalOInt2ᚖint(ctx, rep["price"])
			if err != nil {
				return nil, err
			}

			resp.Weight, err = ec.unmarshalOInt2ᚖint(ctx, rep["weight"])
			if err != nil {
				return nil, err
			}

			list = append(list, resp)

		default:
			return nil, errors.New("unknown type: " + typeName)
		}
	}
	return list, nil
}
